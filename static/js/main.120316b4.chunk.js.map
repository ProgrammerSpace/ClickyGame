{"version":3,"sources":["components/Badge/index.js","components/Jumbotron/index.js","components/ImgCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","react_default","a","createElement","className","Badge","color","score","topscore","Header","Jumbotron","img","Card","onClick","handleClick","CardImg","data-clicked","data-id","id","src","alt","name","App","state","images","shuffleTiles","array","sort","Math","random","event","preventDefault","target","getAttribute","localStorage","setItem","_this","alert","document","location","reload","setAttribute","setState","ts","getItem","console","log","this","_this2","Fragment","components_Badge","components_Jumbotron","Container","map","image","ImgCard","key","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k8DAUeA,EAPD,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAwBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,MAAM,WAAb,SAA8BN,EAAMO,MAApC,gBAAwDP,EAAMQ,qBCQjGC,EAXA,WACX,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,6GCMDO,EARH,SAACX,GACT,OACIC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMR,UAAU,iBAAiBS,QAASb,EAAMc,aAC5Cb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASX,UAAU,OAAOY,gBAAc,EAAOC,UAASjB,EAAMkB,GAAIC,IAAKnB,EAAMmB,IAAKC,IAAKpB,EAAMqB,iBCkF1FC,oNAjFbC,MAAQ,CACNC,SACAjB,MAAO,EACPC,SAAU,KA0BZiB,aAAe,SAACC,GACdA,EAAMC,KAAK,WACT,MAAO,GAAMC,KAAKC,cAKtBf,YAAc,SAAAgB,GAGZ,GAFAA,EAAMC,iBAEU,SADFD,EAAME,OAAOC,aAAa,gBAEtCC,aAAaC,QAAQ,WAAYC,EAAKb,MAAMf,UAC5C6B,MAAM,mCACNC,SAASC,SAASC,QAAO,OACpB,CACLV,EAAME,OAAOS,aAAa,gBAAgB,GAC1C,IAAIlC,EAAQ6B,EAAKb,MAAMhB,MACnBC,EAAW4B,EAAKb,MAAMf,UAC1BD,GAAS,GACGC,IACVA,EAAWD,GAEb6B,EAAKM,SAAS,CACZnC,MAAOA,EACPC,SAAUA,IAGd4B,EAAKX,aAAaW,EAAKb,MAAMC,4FAhD7B,IAAImB,EAAKT,aAAaU,QAAQ,YAC9BC,QAAQC,IAAIH,GACD,OAAPA,GACFE,QAAQC,IAAI,iBACZC,KAAKL,SAAS,CACZlC,SAAUmC,KAGZI,KAAKL,SAAS,CACZlC,SAAU,mDAQd0B,aAAaC,QAAQ,WAAYY,KAAKxB,MAAMf,2CAkCrC,IAAAwC,EAAAD,KACP,OACE9C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACEhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAO3C,MAAOwC,KAAKxB,MAAMhB,MAAOC,SAAUuC,KAAKxB,MAAMf,WACrDP,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACGL,KAAKxB,MAAMC,OAAO6B,IAAI,SAAAC,GAAK,OAC1BrD,EAAAC,EAAAC,cAACoD,EAAD,CACErC,GAAIoC,EAAMpC,GACVsC,IAAKF,EAAMpC,GACXG,KAAMiC,EAAMjC,KACZF,IAAKmC,EAAMA,MACXxC,YAAakC,EAAKlC,iBAIvB+B,QAAQC,IAAIC,KAAKxB,MAAMC,gBA7EdiC,cCIEC,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.120316b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Badge } from 'reactstrap';\r\n\r\nconst Score = (props) => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"float-right mr-3 mt-2\"><Badge color=\"primary\">Score {props.score} | Top Score {props.topscore}</Badge></h1>\r\n        </div>\r\n    );\r\n}\r\nexport default Score;","import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n                <h1 className=\"display-3\">Clicky Game!!</h1>\r\n                <h5 className=\"display-5\">Click on an image to earn points, but don't click on any image more than once!</h5>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css'\r\nimport {\r\n    Card, CardImg\r\n} from 'reactstrap';\r\n\r\nconst img = (props) => {\r\n    return (\r\n        <Card className=\"box float-left\" onClick={props.handleClick}>\r\n            <CardImg className=\"tile\" data-clicked={false} data-id={props.id} src={props.src} alt={props.name} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default img;","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport Badge from './components/Badge';\nimport Jumbo from './components/Jumbotron';\nimport Card from './components/ImgCard'\nimport images from \"./images.json\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    images,\n    score: 0,\n    topscore: 0\n  };\n\n  // Set top score from local storage\n  componentDidMount() {\n    let ts = localStorage.getItem(\"topscore\");\n    console.log(ts);\n    if (ts !== null) {\n      console.log(\"hit not null!\");\n      this.setState({\n        topscore: ts\n      });\n    } else {\n      this.setState({\n        topscore: 0\n      });\n    }\n  }\n\n  // Before component unmount\n  // Page reload doesn't actually unmount components, componentWillUnmount is not going to hit before reload.\n  componentWillUnmount() {\n    localStorage.setItem(\"topscore\", this.state.topscore);\n  }\n\n  // Shuffle images array\n  shuffleTiles = (array) => {\n    array.sort(function () {\n      return 0.5 - Math.random();\n    });\n  }\n\n  // When you click on tile\n  handleClick = event => {\n    event.preventDefault();\n    let clicked = event.target.getAttribute('data-clicked');\n    if (clicked === 'true') {\n      localStorage.setItem(\"topscore\", this.state.topscore);\n      alert(\"Oh no!! Why don't you try again\");\n      document.location.reload(true);\n    } else {\n      event.target.setAttribute('data-clicked', true);\n      let score = this.state.score;\n      let topscore = this.state.topscore;\n      score += 1;\n      if (score > topscore) {\n        topscore = score;\n      }\n      this.setState({\n        score: score,\n        topscore: topscore\n      });\n    }\n    this.shuffleTiles(this.state.images);\n  };\n\n  render() {\n    return (\n      <>\n        <Badge score={this.state.score} topscore={this.state.topscore} />\n        <Jumbo />\n        <Container>\n          {this.state.images.map(image => (\n            <Card\n              id={image.id}\n              key={image.id}\n              name={image.name}\n              src={image.image}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </Container>\n        {console.log(this.state.images)}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}